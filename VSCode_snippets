{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Stateless": {
    "prefix": "stateless",
		"body": [
			"import React from 'react';",
			"const ${TM_FILENAME_BASE/(^[A-Z])/${1:/downcase}/} = (props) => {$0};",
			"export default ${TM_FILENAME_BASE/(^[A-Z])/${1:/downcase}/};"	
			],
    "description": "Stateless react component"
  },
  "Statefull": {
    "prefix": "statefull",
    "body": [
      "import React, { Component } from 'react';",
      "class ${TM_FILENAME_BASE} extends Component {",
      " render() {",
      "   return(",
      "     <div>",
      "       $0",
      "     </div>)",
      "}}",
      "export default ${TM_FILENAME_BASE};"
    ]
  },
  "MapStateToProps": {
    "prefix": "mapstate",
    "body": [
      "const mapStateToProps = state => {",
      " return {",
      "   $1",
      " }",
      "};",
    ]
  },
  "MapDispatchToProps": {
    "prefix": "mapdispatch",
    "body": [
      "const mapDispatchToProps = dispatch => {",
      " return {",
      "   $1",
      " }",
      "};",
    ]
  }
}
